{"ast":null,"code":"var _jsxFileName = \"/Users/murarimirthipati/Desktop/Personal/MERN-CHAT-APP/frontend/src/components/SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, undef } from 'react';\nimport { FormControl, Input, Box, Text, IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5000\"; // Change this to your backend URL\nvar socket, selectedChatCompare;\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!istyping) {\n      setIsTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && istyping) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setIsTyping(false);\n      }\n    }, timerLength);\n  };\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  const sendMessage = async () => {\n    if (!newMessage) return;\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.post(\"/api/message\", {\n        content: newMessage,\n        chatId: selectedChat\n      }, config);\n      socket.emit(\"new message\", data);\n      setMessages([...messages, data]);\n      setNewMessage(\"\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to send the Message\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    return () => {\n      socket.disconnect();\n    };\n  }, [user]);\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare ||\n      // if chat is not selected or doesn't match current chat\n      selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n    return () => {\n      socket.off(\"message recieved\");\n    };\n  }, [messages, selectedChatCompare, notification, fetchAgain]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        d: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          d: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 21\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModal, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        d: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          id: \"message-input\",\n          isRequired: true,\n          mt: 3,\n          children: [istyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions\n              // height={50}\n              ,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this) : null, /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message..\",\n            value: newMessage,\n            onChange: typingHandler,\n            onKeyDown: e => {\n              if (e.key === \"Enter\") sendMessage();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Placeholder when no chat is selected\n    _jsxDEV(Box, {\n      d: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"SuSyMMpMnit3ugWDam8UnngOqeQ=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","undef","FormControl","Input","Box","Text","IconButton","Spinner","useToast","ArrowBackIcon","ProfileModal","ScrollableChat","Lottie","animationData","io","UpdateGroupChatModal","ChatState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","selectedChatCompare","SingleChat","fetchAgain","setFetchAgain","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","istyping","setIsTyping","toast","selectedChat","setSelectedChat","user","notification","setNotification","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","typingHandler","e","target","value","emit","_id","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","fetchMessages","config","headers","Authorization","token","data","get","error","title","description","status","duration","isClosable","position","sendMessage","post","content","chatId","on","disconnect","newMessageRecieved","chat","includes","off","children","fontSize","base","md","pb","px","w","fontFamily","d","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","getSender","users","getSenderFull","chatName","toUpperCase","flexDir","p","bg","h","borderRadius","overflowY","size","alignSelf","margin","className","id","isRequired","mt","options","width","style","marginBottom","marginLeft","variant","placeholder","onChange","onKeyDown","key","_c","$RefreshReg$"],"sources":["/Users/murarimirthipati/Desktop/Personal/MERN-CHAT-APP/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useRef, useState,undef } from 'react';\nimport {\n  FormControl,\n  Input,\n  Box,\n  Text,\n  IconButton,\n  Spinner,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport axios from \"axios\";\n\nconst ENDPOINT = \"http://localhost:5000\"; // Change this to your backend URL\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!istyping) {\n      setIsTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && istyping) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setIsTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!newMessage) return;\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/message\",\n        {\n          content: newMessage,\n          chatId: selectedChat,\n        },\n        config\n      );\n\n      socket.emit(\"new message\", data);\n      setMessages([...messages, data]);\n      setNewMessage(\"\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to send the Message\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    return () => {\n      socket.disconnect();\n    };\n  }, [user]);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n\n    return () => {\n      socket.off(\"message recieved\");\n    };\n  }, [messages, selectedChatCompare, notification, fetchAgain]);\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl id=\"message-input\" isRequired mt={3}>\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : null}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") sendMessage();\n                }}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // Placeholder when no chat is selected\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}